package com.nju.backend.service.vulnerabilityReport.util;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.nju.backend.repository.mapper.VulnerabilityReportMapper;
import com.nju.backend.repository.po.VulnerabilityReport;
import com.xxl.job.core.context.XxlJobHelper;
import com.xxl.job.core.handler.annotation.XxlJob;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;

@Component
public class VulnerabilityJobHandler {

    @Autowired
    private VulnerabilityReportMapper vulnerabilityReportMapper;

    @XxlJob("githubVulnerabilityFetchJob")
    public void fetchGithubVulnerabilityData() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            String url = "http://localhost:5000/vulnerabilities/github";
            String jsonData = restTemplate.getForObject(url, String.class);

            List<VulnerabilityReport> vulnerabilities = parseJsonData(jsonData);
            saveToDatabase(vulnerabilities);

            XxlJobHelper.log("Vulnerability data fetched and stored successfully.");
        } catch (Exception e) {
            XxlJobHelper.log("Error occurred while fetching vulnerability data: " + e.getMessage());
        }
    }

    @XxlJob("avdVulnerabilityFetchJob")
    public void fetchAvdVulnerabilityData() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            String url = "http://localhost:5000/vulnerabilities/avd";
            String jsonData = restTemplate.getForObject(url, String.class);

            List<VulnerabilityReport> vulnerabilities = parseJsonData(jsonData);
            saveToDatabase(vulnerabilities);

            XxlJobHelper.log("Vulnerability data fetched and stored successfully.");
        } catch (Exception e) {
            XxlJobHelper.log("Error occurred while fetching vulnerability data: " + e.getMessage());
        }
    }

    @XxlJob("nvdVulnerabilityFetchJob")
    public void fetchNvdVulnerabilityData() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            String url = "http://localhost:5000/vulnerabilities/nvd";
            String jsonData = restTemplate.getForObject(url, String.class);

            List<VulnerabilityReport> vulnerabilities = parseJsonData(jsonData);
            saveToDatabase(vulnerabilities);

            XxlJobHelper.log("Vulnerability data fetched and stored successfully.");
        } catch (Exception e) {
            XxlJobHelper.log("Error occurred while fetching vulnerability data: " + e.getMessage());
        }
    }

    private List<VulnerabilityReport> parseJsonData(String jsonData) {
        ObjectMapper mapper = new ObjectMapper();
        try {
            return mapper.readValue(jsonData, new TypeReference<List<VulnerabilityReport>>() {});
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            return Collections.emptyList();
        }
    }

    private void saveToDatabase(List<VulnerabilityReport> vulnerabilities) {
        if (vulnerabilities == null || vulnerabilities.isEmpty()) {
            XxlJobHelper.log("No vulnerability data to store.");
            return;
        }

        for (VulnerabilityReport report : vulnerabilities) {
            if (vulnerabilityReportMapper.selectById(report.getId()) == null) {
                vulnerabilityReportMapper.insert(report);
            } else {
                XxlJobHelper.log("Duplicate entry found for vulnerability: " + report.getVulnerabilityName());
            }
        }
    }
}