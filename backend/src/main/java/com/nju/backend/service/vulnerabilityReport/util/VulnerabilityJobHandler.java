package com.nju.backend.service.vulnerabilityReport.util;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.nju.backend.repository.mapper.*;
import com.nju.backend.repository.po.*;
import com.xxl.job.core.context.XxlJobHelper;
import com.xxl.job.core.handler.annotation.XxlJob;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.text.ParseException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.*;
import java.util.stream.Collectors;

@Component
public class VulnerabilityJobHandler {

    @Autowired
    private VulnerabilityReportMapper vulnerabilityReportMapper;

    @Autowired
    private CompanyMapper companyMapper;

    @Autowired
    private VulnerabilityReportVulnerabilityMapper vulnerabilityReportVulnerabilityMapper;

    @Autowired
    private ProjectVulnerabilityMapper projectVulnerabilityMapper;

    @Autowired
    private VulnerabilityMapper vulnerabilityMapper;

    static List<String> SupportedLanguages = Arrays.asList("java", "c");

    @XxlJob("githubVulnerabilityFetchJob")
    public void fetchGithubVulnerabilityData() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            String url = "http://localhost:5000/vulnerabilities/github";
            String jsonData = restTemplate.getForObject(url, String.class);

            List<VulnerabilityReport> vulnerabilities = parseJsonData(jsonData);
            vulnerabilities  = selectDodayvulnerabilities(vulnerabilities);
            detectVulnerabilities(vulnerabilities);

            XxlJobHelper.log("Vulnerability data fetched and stored successfully.");
        } catch (Exception e) {
            XxlJobHelper.log("Error occurred while fetching vulnerability data: " + e.getMessage());
        }
    }

    @XxlJob("avdVulnerabilityFetchJob")
    public void fetchAvdVulnerabilityData() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            String url = "http://localhost:5000/vulnerabilities/avd";
            String jsonData = restTemplate.getForObject(url, String.class);
            //String jsonData = "[{\"affectsWhitelist\":0,\"cveId\":\"CVE-2025-24367\",\"description\":\"Cacti is an open source performance and fault management framework. An authenticated Cacti user can abuse graph creation and graph template functionality to create arbitrary PHP scripts in the web root of the application, leading to remote code execution on the server. This vulnerability is fixed in 1.2.29.\",\"disclosureTime\":\"2025-01-28\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2025-24367\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Cacti \\u4efb\\u610f\\u6587\\u4ef6\\u521b\\u5efa\\u81f4\\u8fdc\\u7a0b\\u4ee3\\u7801\\u6267\\u884c\\u6f0f\\u6d1e\\uff08CVE-2025-24367\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2025-22604\",\"description\":\"Cacti is an open source performance and fault management framework. Due to a flaw in multi-line SNMP result parser, authenticated users can inject malformed OIDs in the response. When processed by ss_net_snmp_disk_io() or ss_net_snmp_disk_bytes(), a part of each OID will be used as a key in an array that is used as part of a system command, causing a command execution vulnerability. This vulnerability is fixed in 1.2.29.\",\"disclosureTime\":\"2025-01-28\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2025-22604\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Cacti \\u591a\\u884cSNMP\\u54cd\\u5e94\\u9a8c\\u8bc1\\u81f4\\u4ee3\\u7801\\u6267\\u884c\\u6f0f\\u6d1e\\uff08CVE-2025-22604\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2025-0282\",\"description\":\"A stack-based buffer overflow in Ivanti Connect Secure before version 22.7R2.5, Ivanti Policy Secure before version 22.7R1.2, and Ivanti Neurons for ZTA gateways before version 22.7R2.3 allows a remote unauthenticated attacker to achieve remote code execution.\",\"disclosureTime\":\"2025-01-09\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2025-0282\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Ivanti Connect Secure \\u6808\\u6ea2\\u51fa\\u6f0f\\u6d1e\\uff08CVE-2025-0282\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-50603\",\"description\":\"An issue was discovered in Aviatrix Controller before 7.1.4191 and 7.2.x before 7.2.4996. Due to the improper neutralization of special elements used in an OS command, an unauthenticated attacker is able to execute arbitrary code. Shell metacharacters can be sent to /v1/api in cloud_type for list_flightpath_destination_instances, or src_cloud_type for flightpath_connection_test.\",\"disclosureTime\":\"2025-01-08\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-50603\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Aviatrix Controller cloud_type \\u547d\\u4ee4\\u6267\\u884c\\u6f0f\\u6d1e\\uff08CVE-2024-50603\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-43441\",\"description\":\"Authentication Bypass by Assumed-Immutable Data vulnerability in Apache HugeGraph-Server.\\n\\nThis issue affects Apache HugeGraph-Server: from 1.0.0 before 1.5.0.\\n\\nUsers are recommended to upgrade to version 1.5.0, which fixes the issue.\",\"disclosureTime\":\"2024-12-24\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-43441\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Apache HugeGraph-Server JWT \\u6743\\u9650\\u7ed5\\u8fc7\\u6f0f\\u6d1e\\uff08CVE-2024-43441\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-56337\",\"description\":\"Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability in Apache Tomcat.\\n\\nThis issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.1, from 10.1.0-M1 through 10.1.33, from 9.0.0.M1 through 9.0.97.\\n\\nThe mitigation for CVE-2024-50379 was incomplete.\\n\\nUsers running Tomcat on a case insensitive file system with the default servlet write enabled (readonly initialisation \\nparameter set to the non-default value of false) may need additional configuration to fully mitigate CVE-2024-50379 depending on which version of Java they are using with Tomcat:\\n- running on Java 8 or Java 11: the system property\\u00a0sun.io.useCanonCaches must be explicitly set to false (it defaults to true)\\n- running on Java 17: the\\u00a0system property sun.io.useCanonCaches, if set, must be set to false\\u00a0(it defaults to false)\\n- running on Java 21 onwards: no further configuration is required\\u00a0(the system property and the problematic cache have been removed)\\n\\nTomcat 11.0.3, 10.1.35 and 9.0.99 onwards will include checks that\\u00a0sun.io.useCanonCaches is set appropriately before allowing the default servlet to be write enabled on a case insensitive file system. Tomcat will also set\\u00a0sun.io.useCanonCaches to false by default where it can.\",\"disclosureTime\":\"2024-12-21\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-56337\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Apache Tomcat \\u6761\\u4ef6\\u7ade\\u4e89\\u6587\\u4ef6\\u4e0a\\u4f20\\u6f0f\\u6d1e\\uff08CVE-2024-56337\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-56145\",\"description\":\"Craft is a flexible, user-friendly CMS for creating custom digital experiences on the web and beyond. Users of affected versions are affected by this vulnerability if their php.ini configuration has `register_argc_argv` enabled. For these users an unspecified remote code execution vector is present. Users are advised to update to version 3.9.14, 4.13.2, or 5.5.2. Users unable to upgrade should disable `register_argc_argv` to mitigate the issue.\",\"disclosureTime\":\"2024-12-19\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-56145\",\"riskLevel\":\"CVE EXP\",\"vulnerabilityName\":\"Craft CMS register_argc_argv \\u81f4\\u6a21\\u677f\\u6ce8\\u5165\\u4ee3\\u7801\\u6267\\u884c\\u6f0f\\u6d1e\\uff08CVE-2024-56145\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-50379\",\"description\":\"Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability in Apache Tomcat.\\n\\nThis issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.1, from 10.1.0-M1 through 10.1.33, from 9.0.0.M1 through 9.0.97.\\n\\nThe mitigation for CVE-2024-50379 was incomplete.\\n\\nUsers running Tomcat on a case insensitive file system with the default servlet write enabled (readonly initialisation \\nparameter set to the non-default value of false) may need additional configuration to fully mitigate CVE-2024-50379 depending on which version of Java they are using with Tomcat:\\n- running on Java 8 or Java 11: the system property\\u00a0sun.io.useCanonCaches must be explicitly set to false (it defaults to true)\\n- running on Java 17: the\\u00a0system property sun.io.useCanonCaches, if set, must be set to false\\u00a0(it defaults to false)\\n- running on Java 21 onwards: no further configuration is required\\u00a0(the system property and the problematic cache have been removed)\\n\\nTomcat 11.0.3, 10.1.35 and 9.0.99 onwards will include checks that\\u00a0sun.io.useCanonCaches is set appropriately before allowing the default servlet to be write enabled on a case insensitive file system. Tomcat will also set\\u00a0sun.io.useCanonCaches to false by default where it can.\",\"disclosureTime\":\"2024-12-17\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-50379\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Apache Tomcat \\u6761\\u4ef6\\u7ade\\u4e89\\u6587\\u4ef6\\u4e0a\\u4f20\\u6f0f\\u6d1e\\uff08CVE-2024-50379\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-53677\",\"description\":\"File upload logic in Apache Struts is flawed.\\u00a0An attacker can manipulate file upload params to enable paths traversal and under some circumstances this can lead to uploading a malicious file which can be used to perform Remote Code Execution.\\n\\nThis issue affects Apache Struts: from 2.0.0 before 6.4.0.\\n\\nUsers are recommended to upgrade to version 6.4.0 at least and migrate to the new  file upload mechanism https://struts.apache.org/core-developers/file-upload . If you are not using an old file upload logic based on\\u00a0FileuploadInterceptor\\u00a0your application is safe.\\n\\nYou can find more details in\\u00a0 https://cwiki.apache.org/confluence/display/WW/S2-067\",\"disclosureTime\":\"2024-12-12\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-53677\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Apache Struts FileUploadInterceptor \\u76ee\\u5f55\\u904d\\u5386\\u4e0e\\u6587\\u4ef6\\u4e0a\\u4f20\\u6f0f\\u6d1e\\uff08CVE-2024-53677\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-49112\",\"description\":\"Windows Lightweight Directory Access Protocol (LDAP) Remote Code Execution Vulnerability\",\"disclosureTime\":\"2024-12-10\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-49112\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Windows \\u8f7b\\u91cf\\u7ea7\\u76ee\\u5f55\\u8bbf\\u95ee\\u534f\\u8bae\\uff08LDAP\\uff09\\u8fdc\\u7a0b\\u4ee3\\u7801\\u6267\\u884c\\u6f0f\\u6d1e\\uff08CVE-2024-49112\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-49113\",\"description\":\"Windows Lightweight Directory Access Protocol (LDAP) Denial of Service Vulnerability\",\"disclosureTime\":\"2024-12-10\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-49113\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Windows \\u8f7b\\u91cf\\u7ea7\\u76ee\\u5f55\\u8bbf\\u95ee\\u534f\\u8bae\\uff08LDAP\\uff09\\u4fe1\\u606f\\u6cc4\\u6f0f\\u4e0e\\u62d2\\u7edd\\u670d\\u52a1\\u6f0f\\u6d1e\\uff08CVE-2024-49113\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-42327\",\"description\":\"A non-admin user account on the Zabbix frontend with the default User role, or with any other role that gives API access can exploit this vulnerability. An SQLi exists in the CUser class in the addRelatedObjects function, this function is being called from the CUser.get function which is available for every user who has API access.\",\"disclosureTime\":\"2024-11-27\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-42327\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Zabbix user.get API SQL \\u6ce8\\u5165\\u6f0f\\u6d1e\\uff08CVE-2024-42327\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-0012\",\"description\":\"An authentication bypass in Palo Alto Networks PAN-OS software enables an unauthenticated attacker with network access to the management web interface to gain PAN-OS administrator privileges to perform administrative actions, tamper with the configuration, or exploit other authenticated privilege escalation vulnerabilities like  CVE-2024-9474 https://security.paloaltonetworks.com/CVE-2024-9474 .\\n\\nThe risk of this issue is greatly reduced if you secure access to the management web interface by restricting access to only trusted internal IP addresses according to our recommended\\u00a0 best practice deployment guidelines https://live.paloaltonetworks.com/t5/community-blogs/tips-amp-tricks-how-to-secure-the-management-access-of-your-palo/ba-p/464431 .\\n\\nThis issue is applicable only to PAN-OS 10.2, PAN-OS 11.0, PAN-OS 11.1, and PAN-OS 11.2 software.\\n\\nCloud NGFW and Prisma Access are not impacted by this vulnerability.\",\"disclosureTime\":\"2024-11-19\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-0012\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Palo Alto Networks PAN-OS Management Web Interface \\u6743\\u9650\\u7ed5\\u8fc7\\u6f0f\\u6d1e\\uff08CVE-2024-0012\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-47208\",\"description\":\"Server-Side Request Forgery (SSRF), Improper Control of Generation of Code ('Code Injection') vulnerability in Apache OFBiz.\\n\\nThis issue affects Apache OFBiz: before 18.12.17.\\n\\nUsers are recommended to upgrade to version 18.12.17, which fixes the issue.\",\"disclosureTime\":\"2024-11-18\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-47208\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Apache OFBiz Groovy\\u8868\\u8fbe\\u5f0f\\u6ce8\\u5165\\u6f0f\\u6d1e\\uff08CVE-2024-47208\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-50340\",\"description\":\"symfony/runtime is a module for the Symphony PHP framework which enables decoupling PHP applications from global state. When the `register_argv_argc` php directive is set to `on` , and users call any URL with a special crafted query string, they are able to change the environment or debug mode used by the kernel when handling the request. As of versions 5.4.46, 6.4.14, and 7.1.7 the `SymfonyRuntime` now ignores the `argv` values for non-SAPI PHP runtimes. All users are advised to upgrade. There are no known workarounds for this vulnerability.\",\"disclosureTime\":\"2024-11-07\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-50340\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Symfony runtime \\u53d8\\u91cf\\u53ef\\u63a7\\u6f0f\\u6d1e\\uff08CVE-2024-50340\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-51504\",\"description\":\"When using IPAuthenticationProvider in ZooKeeper Admin Server there is a possibility of Authentication Bypass by Spoofing -- this only impacts IP based authentication implemented in ZooKeeper Admin Server. Default configuration of client's IP address detection in\\u00a0IPAuthenticationProvider, which uses HTTP request headers, is weak\\u00a0and allows an attacker to bypass authentication via spoofing client's IP address in request headers. Default configuration honors X-Forwarded-For HTTP header to read client's IP address. X-Forwarded-For request header is mainly used by proxy servers to identify the client and can be easily spoofed by an attacker pretending that the request comes from a different IP address. Admin Server commands, such as snapshot and restore arbitrarily can be executed on successful exploitation which could potentially lead to information leakage or service availability issues. Users are recommended to upgrade to version 3.9.3, which fixes this issue.\",\"disclosureTime\":\"2024-11-07\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-51504\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Apache ZooKeeper Admin Server IPAuthenticationProvider \\u8ba4\\u8bc1\\u7ed5\\u8fc7\\u6f0f\\u6d1e \\uff08CVE-2024-51504\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-51567\",\"description\":\"upgrademysqlstatus in databases/views.py in CyberPanel (aka Cyber Panel) before 5b08cd6 allows remote attackers to bypass authentication and execute arbitrary commands via /dataBases/upgrademysqlstatus by bypassing secMiddleware (which is only for a POST request) and using shell metacharacters in the statusfile property, as exploited in the wild in October 2024 by PSAUX. Versions through 2.3.6 and (unpatched) 2.3.7 are affected.\",\"disclosureTime\":\"2024-10-28\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-1757649\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"CyberPanel upgrademysqlstatus \\u8fdc\\u7a0b\\u547d\\u4ee4\\u6267\\u884c\\u6f0f\\u6d1e\\uff08CVE-2024-51567\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-50623\",\"description\":\"In Cleo Harmony before 5.8.0.21, VLTrader before 5.8.0.21, and LexiCom before 5.8.0.21, there is an unrestricted file upload and download that could lead to remote code execution.\",\"disclosureTime\":\"2024-10-27\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-50623\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Cleo Synchronization \\u4efb\\u610f\\u6587\\u4ef6\\u8bfb\\u53d6\\u4e0a\\u4f20\\u6f0f\\u6d1e\\uff08CVE-2024-50623\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-47575\",\"description\":\"A missing authentication for critical function in FortiManager 7.6.0, FortiManager 7.4.0 through 7.4.4, FortiManager 7.2.0 through 7.2.7, FortiManager 7.0.0 through 7.0.12, FortiManager 6.4.0 through 6.4.14, FortiManager 6.2.0 through 6.2.12, Fortinet FortiManager Cloud 7.4.1 through 7.4.4, FortiManager Cloud 7.2.1 through 7.2.7, FortiManager Cloud 7.0.1 through 7.0.12, FortiManager Cloud 6.4.1 through 6.4.7 allows attacker to execute arbitrary code or commands via specially crafted requests.\",\"disclosureTime\":\"2024-10-23\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-47575\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Fortinet FortiManager \\u8eab\\u4efd\\u8ba4\\u8bc1\\u7ed5\\u8fc7\\u81f4\\u4ee3\\u7801\\u6267\\u884c\\u6f0f\\u6d1e\\uff08CVE-2024-47575\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-41713\",\"description\":\"A vulnerability in the NuPoint Unified Messaging (NPM) component of Mitel MiCollab through 9.8 SP1 FP2 (9.8.1.201) could allow an unauthenticated attacker to conduct a path traversal attack, due to insufficient input validation. A successful exploit could allow unauthorized access, enabling the attacker to view, corrupt, or delete users' data and system configurations.\",\"disclosureTime\":\"2024-10-22\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-41713\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Mitel Micollab NuPoint \\u6587\\u4ef6\\u8bfb\\u53d6\\u6f0f\\u6d1e\\uff08CVE-2024-41713\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-35286\",\"description\":\"A vulnerability in NuPoint Messenger (NPM) of Mitel MiCollab through 9.8.0.33 allows an unauthenticated attacker to conduct a SQL injection attack due to insufficient sanitization of user input. A successful exploit could allow an attacker to access sensitive information and execute arbitrary database and management operations.\",\"disclosureTime\":\"2024-10-22\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-35286\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Mitel Micollab NuPoint SQL\\u6ce8\\u5165\\u6f0f\\u6d1e\\uff08CVE-2024-35286\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-38819\",\"description\":\"Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.\",\"disclosureTime\":\"2024-10-17\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-38819\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Spring Framework \\u7279\\u5b9a\\u6761\\u4ef6\\u4e0b\\u76ee\\u5f55\\u904d\\u5386\\u6f0f\\u6d1e\\uff08CVE-2024-38819\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-45216\",\"description\":\"Improper Authentication vulnerability in Apache Solr.\\n\\nSolr instances using the PKIAuthenticationPlugin, which is enabled by default when Solr Authentication is used, are vulnerable to Authentication bypass.\\nA fake ending at the end of any Solr API URL path, will allow requests to skip Authentication while maintaining the API contract with the original URL Path.\\nThis fake ending looks like an unprotected API path, however it is stripped off internally after authentication but before API routing.\\n\\n\\nThis issue affects Apache Solr: from 5.3.0 before 8.11.4, from 9.0.0 before 9.7.0.\\n\\nUsers are recommended to upgrade to version 9.7.0, or 8.11.4, which fix the issue.\",\"disclosureTime\":\"2024-10-16\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-45216\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Apache Solr \\u8ba4\\u8bc1\\u7ed5\\u8fc7\\u6f0f\\u6d1e\\uff08CVE-2024-45216\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-31449\",\"description\":\"Redis is an open source, in-memory database that persists on disk. An authenticated user may use a specially crafted Lua script to trigger a stack buffer overflow in the bit library, which may potentially lead to remote code execution. The problem exists in all versions of Redis with Lua scripting. This problem has been fixed in Redis versions 6.2.16, 7.2.6, and 7.4.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.\",\"disclosureTime\":\"2024-10-07\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-31449\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Redis Lua Script \\u6ea2\\u51fa\\u6f0f\\u6d1e\\uff08CVE-2024-31449\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-9014\",\"description\":\"pgAdmin versions 8.11 and earlier are vulnerable to a security flaw in OAuth2 authentication. This vulnerability allows an attacker to potentially obtain the client ID and secret, leading to unauthorized access to user data.\",\"disclosureTime\":\"2024-09-24\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-9014\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"pgAdmin4 OAuth2 client ID\\u4e0esecret\\u654f\\u611f\\u4fe1\\u606f\\u6cc4\\u6f0f\\u6f0f\\u6d1e\\uff08CVE-2024-9014\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-46938\",\"description\":\"An issue was discovered in Sitecore Experience Platform (XP), Experience Manager (XM), and Experience Commerce (XC) 8.0 Initial Release through 10.4 Initial Release. An unauthenticated attacker can read arbitrary files.\",\"disclosureTime\":\"2024-09-16\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-46938\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"SiteCore \\u6587\\u4ef6\\u8bfb\\u53d6\\u6f0f\\u6d1e\\uff08CVE-2024-46938\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-38816\",\"description\":\"Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.\\n\\nSpecifically, an application is vulnerable when both of the following are true:\\n\\n  *  the web application uses RouterFunctions\\u00a0to serve static resources\\n  *  resource handling is explicitly configured with a FileSystemResource\\u00a0location\\n\\n\\nHowever, malicious requests are blocked and rejected when any of the following is true:\\n\\n  *  the  Spring Security HTTP Firewall https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html \\u00a0is in use\\n  *  the application runs on Tomcat or Jetty\",\"disclosureTime\":\"2024-09-13\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-38816\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Spring Framework \\u7279\\u5b9a\\u6761\\u4ef6\\u4e0b\\u76ee\\u5f55\\u904d\\u5386\\u6f0f\\u6d1e\\uff08CVE-2024-38816\\uff09\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-29847\",\"description\":\"Deserialization of untrusted data in the agent portal of Ivanti EPM before 2022 SU6, or the 2024 September update allows a remote unauthenticated attacker to achieve remote code execution.\",\"disclosureTime\":\"2024-09-12\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-29847\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Ivanti Endpoint Manager Agent Portal \\u5b58\\u5728\\u53cd\\u5e8f\\u5217\\u5316\\u6f0f\\u6d1e(CVE-2024-29847)\"},{\"affectsWhitelist\":0,\"cveId\":\"CVE-2024-37288\",\"description\":\"A deserialization issue in Kibana can lead to arbitrary code execution when Kibana attempts to parse a YAML document containing a crafted payload. This issue only affects users that use  Elastic Security\\u2019s built-in AI tools https://www.elastic.co/guide/en/security/current/ai-for-security.html \\u00a0and have configured an  Amazon Bedrock connector https://www.elastic.co/guide/en/security/current/assistant-connect-to-bedrock.html .\",\"disclosureTime\":\"2024-09-09\",\"isDelete\":0,\"referenceLink\":\"https://avd.aliyun.com/detail?id=AVD-2024-37288\",\"riskLevel\":\"CVE PoC\",\"vulnerabilityName\":\"Kibana 8.15.1  Amazon Bedrock YAML \\u53cd\\u5e8f\\u5217\\u5316\\u6f0f\\u6d1e\\uff08CVE-2024-37288\\uff09\"}]\n";
            System.out.println(jsonData);
            List<VulnerabilityReport> vulnerabilities = parseJsonData(jsonData);

            selectDodayvulnerabilities(vulnerabilities);
            detectVulnerabilities(vulnerabilities);

            XxlJobHelper.log("Vulnerability data fetched and stored successfully.");
        } catch (Exception e) {
            XxlJobHelper.log("Error occurred while fetching vulnerability data: " + e.getMessage());
        }
    }

    @XxlJob("nvdVulnerabilityFetchJob")
    public void fetchNvdVulnerabilityData() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            String url = "http://localhost:5000/vulnerabilities/nvd";
            String jsonData = restTemplate.getForObject(url, String.class);

            List<VulnerabilityReport> vulnerabilities = parseJsonData(jsonData);
            selectDodayvulnerabilities(vulnerabilities);
            detectVulnerabilities(vulnerabilities);

            XxlJobHelper.log("Vulnerability data fetched and stored successfully.");
        } catch (Exception e) {
            XxlJobHelper.log("Error occurred while fetching vulnerability data: " + e.getMessage());
        }
    }

    private List<VulnerabilityReport> parseJsonData(String jsonData) {
        ObjectMapper mapper = new ObjectMapper();
        try {
            return mapper.readValue(jsonData, new TypeReference<List<VulnerabilityReport>>() {
            });
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            return Collections.emptyList();
        }
    }

    private void saveToDatabase(List<VulnerabilityReport> vulnerabilities) {
        if (vulnerabilities == null || vulnerabilities.isEmpty()) {
            XxlJobHelper.log("No vulnerability data to store.");
            return;
        }

        for (VulnerabilityReport report : vulnerabilities) {
            if (vulnerabilityReportMapper.selectById(report.getId()) == null) {
                vulnerabilityReportMapper.insert(report);
            } else {
                XxlJobHelper.log("Duplicate entry found for vulnerability: " + report.getVulnerabilityName());
            }
        }
    }

    public void detectVulnerabilities(List<VulnerabilityReport> vulnerabilities) {
        List<Company> companies = companyMapper.selectList(null);
        for (VulnerabilityReport vulnerabilityReport : vulnerabilities) {
            for (Company company : companies) {
                for (String language : SupportedLanguages) {
                    RestTemplate restTemplate = new RestTemplate();
                    String url = "http://localhost:5000/vulnerabilities/detect";

                    ObjectMapper objectMapper = new ObjectMapper();
                    String currentWhiteListAsString = null;
                    try {
                        JsonNode whiteListJsonArray = objectMapper.readTree(company.getWhiteList());
                        // 筛选出language字段等于当前循环中的language的所有对象
                        List<JsonNode> currentWhiteList = objectMapper.convertValue(
                                        whiteListJsonArray,
                                        new TypeReference<List<JsonNode>>() {
                                        }
                                ).stream()
                                .filter(node -> node.has("language") && node.get("language").asText().equals(language))
                                .collect(Collectors.toList());
                        currentWhiteListAsString = objectMapper.writeValueAsString(currentWhiteList);
                        if ("".equals(currentWhiteListAsString)){
                            continue;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    // 创建要发送的参数
                    Map<String, String> params = new HashMap<>();
                    params.put("cve_id", vulnerabilityReport.getCveId());
                    params.put("desc", vulnerabilityReport.getDescription());
                    params.put("white_list", currentWhiteListAsString);
                    params.put("company", company.getName());
                    params.put("detect_strategy", company.getDetectStrategy());
                    params.put("similarityThreshold", company.getSimilarityThreshold().toString());
                    params.put("language", language);

                    // 设置HTTP头，指定内容类型为JSON
                    HttpHeaders headers = new HttpHeaders();
                    headers.set("Content-Type", "application/json");

                    // 创建HTTP实体，包含请求体和头信息
                    HttpEntity<Map<String, String>> requestEntity = new HttpEntity<>(params, headers);

                    // 发送POST请求并接收响应
                    ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);

                    int maxDetectNum = company.getMaxDetectNums();
                    String labels = response.getBody();


                        // 获取当前CVE ID对应的记录
                        VulnerabilityReport existingReport = vulnerabilityReportMapper.selectById(vulnerabilityReport.getId());

                        if (existingReport != null) {
                            // 如果记录存在，则更新其VulnerabilityName
                            String updatedVulnerabilityName = existingReport.getVulnerabilityName() + ";" + labels;
                            existingReport.setVulnerabilityName(updatedVulnerabilityName);

                            // 使用updateById根据实体对象的ID进行更新
                            vulnerabilityReportMapper.updateById(existingReport);
                        } else {
                            // 如果记录不存在，则设置新的VulnerabilityName并插入新记录
                            vulnerabilityReport.setVulnerabilityName(labels);
                            vulnerabilityReportMapper.insert(vulnerabilityReport);
                        }


                    try {
                        JsonNode whiteListJsonArray = objectMapper.readTree(currentWhiteListAsString);
                        //根据maxDetectNum做截断
                        List<String> labelList = Arrays.asList(labels.split(";"));
                        if (labelList.size() > maxDetectNum) {
                            labelList = labelList.subList(0, maxDetectNum);
                        }
                        // 遍历 JSON 数组
                        for (JsonNode WhiteList : whiteListJsonArray) {
                            String name = WhiteList.get("name").asText();
                            String pojectid = WhiteList.get("pojectid").asText();
                            if (labelList.contains(name)) {

                                Vulnerability vulnerability = new Vulnerability();
                                vulnerability.setDescription(vulnerabilityReport.getDescription());
                                vulnerability.setIsAccept(1);
                                vulnerability.setIsDelete(0);
                                vulnerability.setName(name);
                                vulnerability.setRiskLevel(vulnerabilityReport.getRiskLevel());
                                vulnerability.setTime(vulnerabilityReport.getDisclosureTime());
                                vulnerability.setLanguage("暂无");
                                vulnerabilityMapper.insert(vulnerability);


                                VulnerabilityReportVulnerability vulnerabilityReportVulnerability = new VulnerabilityReportVulnerability();
                                vulnerabilityReportVulnerability.setVulnerabilityId(vulnerability.getId());
                                vulnerabilityReportVulnerability.setVulnerabilityReportId(vulnerabilityReport.getId());
                                vulnerabilityReportVulnerability.setIsDelete(0);
                                vulnerabilityReportVulnerabilityMapper.insert(vulnerabilityReportVulnerability);


                                ProjectVulnerability projectVulnerability = new ProjectVulnerability();
                                projectVulnerability.setVulnerabilityId(vulnerability.getId());
                                projectVulnerability.setProjectId(Integer.parseInt(pojectid));
                                projectVulnerability.setIsDelete(0);
                                projectVulnerabilityMapper.insert(projectVulnerability);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

    }

    public static List<VulnerabilityReport> selectDodayvulnerabilities(List<VulnerabilityReport> vulnerabilities) {
        List<VulnerabilityReport> todaysVulnerabilities = new ArrayList<>();
        LocalDate today = LocalDate.now(ZoneId.of("Asia/Shanghai"));  // 设置为上海时区

        for (VulnerabilityReport vulnerability : vulnerabilities) {
            // 将 java.util.Date 转换为 LocalDate
            Date date = vulnerability.getDisclosureTime();
            LocalDate disclosureLocalDate = date.toInstant().atZone(ZoneId.of("Asia/Shanghai")).toLocalDate();

            if (disclosureLocalDate.equals(today)) {
                todaysVulnerabilities.add(vulnerability);
            }
        }

        return todaysVulnerabilities;
    }

}

//"net.java.openjdk.cacio:cacio;com.github.caciocavallosilano:cacio;org.apache.cactus:cactus"
