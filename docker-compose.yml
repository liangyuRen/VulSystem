version: '3.8'

services:
  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: vulsystem-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-changeme}
      MYSQL_DATABASE: ${DB_NAME:-kulin}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
      TZ: Asia/Shanghai
    volumes:
      # Persistent database storage
      - mysql_data:/var/lib/mysql
      # Initialize database with test data
      - ./test_data_corrected.sql:/docker-entrypoint-initdb.d/init.sql:ro
      # MySQL configuration (optional)
      # - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    ports:
      - "${DB_PORT_EXTERNAL:-3306}:3306"
    networks:
      - vulsystem-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-changeme}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password

  # Spring Boot Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vulsystem-backend
    restart: unless-stopped
    environment:
      # Database connection
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-kulin}
      DB_USERNAME: ${DB_USERNAME:-root}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}

      # Application settings
      SERVER_PORT: 8081
      FILE_UPLOAD_DIR: /app/uploads/
      OPENSCA_TOOL_PATH: /app/opensca/

      # JVM options
      JAVA_OPTS: "-Xms512m -Xmx1024m"

      # Timezone
      TZ: Asia/Shanghai
    volumes:
      # Persistent file uploads
      - upload_data:/app/uploads
      # OpenSCA tools directory (mount from host if needed)
      - ./data:/app/opensca:ro
      # Application logs
      - ./logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8081}:8081"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - vulsystem-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Docker Volumes for data persistence
volumes:
  mysql_data:
    driver: local
    name: vulsystem_mysql_data
  upload_data:
    driver: local
    name: vulsystem_uploads

# Docker Network for service communication
networks:
  vulsystem-network:
    driver: bridge
    name: vulsystem_network
